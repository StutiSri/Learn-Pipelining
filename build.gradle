buildscript {
    repositories { jcenter() }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE"
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.3.RELEASE'
}
//group = 'springio'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'docker'
apply plugin: 'application'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

repositories {
    jcenter()
}

configurations {
    dev
}

dependencies {
    testCompile 'junit:junit:4.12'
    dev("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.thymeleaf:thymeleaf-spring4")
    compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

}

version = '0.1.0'

jar {
    baseName = 'jvm-learnpipelining'
    version =  version
}

war{
    baseName = 'jvm-learnpipelining'
    version = version
}

group = 'stutisrivastv'

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'learnpipelining',
                'Implementation-Version': version,
                'Main-Class': 'tw.org.learnPipeling.Application'
    }
    baseName = 'jvm-learnpipelining'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

bootRun {
    // Use Spring Boot DevTool only when we run Gradle bootRun task
    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}

task cool {
    doFirst {
        println war.archiveName
        println war.archivePath
    }
}

task buildDocker(type: Docker, dependsOn: build) {      // this task will build our Docker image
    push = true
    applicationName = jar.baseName
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from war.archivePath
            into stageDir
        }
    }
}

distDocker {
    exposePort 8080
}

/*docker {
    useApi true
}*/
